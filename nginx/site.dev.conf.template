map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {

  listen $LISTEN;
  server_name $SERVER_HOSTNAME;

  $SSL_CERTIFICATE

  include /etc/nginx/general-security-headers.conf;

  location = $PUBLIC_URL {
    proxy_pass http://frontend:8080;
    proxy_redirect     off;

    proxy_set_header   Host                 $host;
    proxy_set_header   X-Real-IP            $remote_addr;
    proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto    $scheme;

    add_header X-pass-by '=$PUBLIC_URL/';
  }

  location ~ ^$PUBLIC_URL/api {
    proxy_pass http://backend:8080;
    proxy_redirect     off;

    proxy_set_header   Host                 $host;
    proxy_set_header   X-Real-IP            $remote_addr;
    proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto    $scheme;

    add_header X-pass-by '$PUBLIC_URL/api';
  }

  location ~ ^$PUBLIC_URL/(?!api) {
    proxy_pass http://frontend:8080;
    proxy_redirect     off;

    proxy_set_header   Host                 $host;
    proxy_set_header   X-Real-IP            $remote_addr;
    proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto    $scheme;
  }

  location ~ ^/sockjs-node {
    proxy_pass http://frontend:8080;
    proxy_redirect     off;

    proxy_set_header   Host                 $host;
    proxy_set_header   X-Real-IP            $remote_addr;
    proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto    $scheme;

    # this enables proxying for websockets, which is used to hot reload
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    add_header X-pass-by '/sockjs-node';
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }

}
